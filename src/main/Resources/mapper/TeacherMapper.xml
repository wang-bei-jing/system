<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.zzti.dao.TeacherMapper">
  <resultMap id="BaseResultMap" type="edu.zzti.bean.Teacher">
    <id column="tno" jdbcType="INTEGER" property="tno" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="sex" jdbcType="VARCHAR" property="sex" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="identity" jdbcType="INTEGER" property="identity" />
    <result column="department" jdbcType="VARCHAR" property="department" />
    <result column="office" jdbcType="VARCHAR" property="office" />
    <result column="tel" jdbcType="VARCHAR" property="tel" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    tno, password, name, sex, title, identity, department, office, tel, email, status
  </sql>



  <update id="updatePassword" parameterType="map" >
    update t_teacher
    set password=#{newPassword,jdbcType=VARCHAR}
    where tno=#{tno,jdbcType=INTEGER}
  </update>

  <select id="selectTeacherByTno" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_teacher
    where tno = #{tno,jdbcType=INTEGER}
  </select>

  <select id="countTeacher" parameterType="map" resultType="java.lang.Integer">
    select count(*)
    from t_teacher
    where tno=#{tno,jdbcType=INTEGER} and password=#{password,jdbcType=VARCHAR}
  </select>



  <select id="selectByExample" parameterType="edu.zzti.bean.TeacherExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_teacher
    where tno = #{tno,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_teacher
    where tno = #{tno,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="edu.zzti.bean.TeacherExample">
    delete from t_teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="edu.zzti.bean.Teacher">
    insert into t_teacher (tno, password, name, 
      sex, title, identity, 
      department, office, tel, 
      email, status)
    values (#{tno,jdbcType=INTEGER}, #{password,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{sex,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, #{identity,jdbcType=INTEGER}, 
      #{department,jdbcType=VARCHAR}, #{office,jdbcType=VARCHAR}, #{tel,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="edu.zzti.bean.Teacher">
    insert into t_teacher
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="tno != null">
        tno,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="identity != null">
        identity,
      </if>
      <if test="department != null">
        department,
      </if>
      <if test="office != null">
        office,
      </if>
      <if test="tel != null">
        tel,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="tno != null">
        #{tno,jdbcType=INTEGER},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="identity != null">
        #{identity,jdbcType=INTEGER},
      </if>
      <if test="department != null">
        #{department,jdbcType=VARCHAR},
      </if>
      <if test="office != null">
        #{office,jdbcType=VARCHAR},
      </if>
      <if test="tel != null">
        #{tel,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.zzti.bean.TeacherExample" resultType="java.lang.Long">
    select count(*) from t_teacher
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update t_teacher
    <set>
      <if test="record.tno != null">
        tno = #{record.tno,jdbcType=INTEGER},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.identity != null">
        identity = #{record.identity,jdbcType=INTEGER},
      </if>
      <if test="record.department != null">
        department = #{record.department,jdbcType=VARCHAR},
      </if>
      <if test="record.office != null">
        office = #{record.office,jdbcType=VARCHAR},
      </if>
      <if test="record.tel != null">
        tel = #{record.tel,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update t_teacher
    set tno = #{record.tno,jdbcType=INTEGER},
      password = #{record.password,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      identity = #{record.identity,jdbcType=INTEGER},
      department = #{record.department,jdbcType=VARCHAR},
      office = #{record.office,jdbcType=VARCHAR},
      tel = #{record.tel,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.zzti.bean.Teacher">
    update t_teacher
    <set>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="identity != null">
        identity = #{identity,jdbcType=INTEGER},
      </if>
      <if test="department != null">
        department = #{department,jdbcType=VARCHAR},
      </if>
      <if test="office != null">
        office = #{office,jdbcType=VARCHAR},
      </if>
      <if test="tel != null">
        tel = #{tel,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where tno = #{tno,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.zzti.bean.Teacher">
    update t_teacher
    set password = #{password,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      identity = #{identity,jdbcType=INTEGER},
      department = #{department,jdbcType=VARCHAR},
      office = #{office,jdbcType=VARCHAR},
      tel = #{tel,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER}
    where tno = #{tno,jdbcType=INTEGER}
  </update>







  <select id="finAllTeacher" resultMap="BaseResultMap">
    select * from t_teacher
  </select>

  <select id="selectAllTeacherByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select * from t_teacher where  name  like concat('%',#{name},'%')
  </select>

  <select id="deleteTeacherByTno" parameterType="java.lang.Integer">
    delete  from t_teacher where  tno=#{tno,jdbcType=INTEGER}
  </select>

</mapper>